#include "dimmerTask.hpp"
#include "dimmerlib.h" 
#include <touchgfx/hal/CONSOL.hpp>

#include "string.h"
#include "dimmerlib.h" 
#include "stdbool.h"

using namespace touchgfx;

#define _RX_LEN 3
#define NUM_CHANNELS 8

int Dimming_Lvl[NUM_CHANNELS] = {0,0,0,0,0,0,0,0}; 
int State		   [NUM_CHANNELS] = {1,1,1,1,1,1,1,1};


extern Ts_AcDimLight_t AcDimLight[DIMMER_LAMP_COUNT];
extern SemaphoreHandle_t SemaphoreUpdateDimmer;
 
static void AcDimmerLearnTask(void* params);
static void AcDimmerTask(void* params);

char kelime[40];
bool ZCD_Flag=false;

uint32_t timenow = 0 ;
uint32_t timenow2 = 0 ;
uint32_t etime = 0 ;

volatile bool isHandled[NUM_CHANNELS] = {0,0,0,0,0,0,0,0};
volatile int Lvl_Counter[NUM_CHANNELS] = {0,0,0,0,0,0,0,0};

int NumActiveChannels = 8;
volatile bool zero_cross = 0;
volatile int NumHandled = 0;

bool pLampState[NUM_CHANNELS]={false,false,false,false,false,false,false,false};


uint32_t freq[4];

void Zero_Crossing_Int();
void dimTimerISR();

extern void DimmerOccur(void){
	dimTimerISR();
}


void DIMMERTASK::DimmerBegin(){
		xTaskCreate(AcDimmerLearnTask, "AcDimmerLearnTask",
                configGUITASKSTKSIZE,
                NULL,
                configGUITASKPRIORITY,
                NULL);
	
		Dimmer_Init();
	
	  /* Create the Semaphore for synchronization between hw & softirq */
    vSemaphoreCreateBinary(SemaphoreUpdateDimmer);	
}

/**
  * @brief  Configures ....
  * @param  None
  * @retval None
  */
void AcDimmerLearnTask(void* params){
		
  int i = 0;
	while(1) {
				/* Block until the semaphore is given */
       xSemaphoreTake(SemaphoreUpdateDimmer, portMAX_DELAY);
				
				for(i = 0 ; i < DIMMER_LAMP_COUNT ; i++)
				{
					if(AcDimLight[i].flag ==true && AcDimLight[i].Mode == ON) 
					{
 					  AcDimLight[i].TriacTime = map(100-AcDimLight[i].Val, 0, 100, 500, 950);
						Dimming_Lvl[i] = AcDimLight[i].TriacTime;
 						break;
					}
					else if(AcDimLight[i].flag ==true && AcDimLight[i].Mode == OFF){
						AcDimLight[i].TriacTime =950;
						Dimming_Lvl[i] = AcDimLight[i].TriacTime;
						break;		
					}
				}
		}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) 
{
		if(GPIO_Pin == AC_Int_Pin){
			HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
			Zero_Crossing_Int();	
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
		}
}

void Zero_Crossing_Int()
{
  if(NumActiveChannels > 0)
  {
    NumHandled = 0;
    
    for(int i=0; i<NUM_CHANNELS; i++)
    {
      isHandled[i] = 0; 
      if(State[i] == 1)
      {
				if(i == 7){
				  HAL_GPIO_WritePin(LAMP_8_GPIO_Port, LAMP_8_Pin, GPIO_PIN_RESET);
				}else if(i  == 0){
				  HAL_GPIO_WritePin(LAMP_1_GPIO_Port, LAMP_1_Pin, GPIO_PIN_RESET);
				}
      }
    }  
    zero_cross = 1; 
  }
}

void dimTimerISR()
{
	
	for(int i = 0; i < NUM_CHANNELS; i++) 
  {
		  if(pLampState[i] == true)
      {
				if(i == 7){
				  HAL_GPIO_WritePin(LAMP_8_GPIO_Port, LAMP_8_Pin, GPIO_PIN_RESET);
					pLampState[i] = false; 
				}else if(i  == 0){
				  HAL_GPIO_WritePin(LAMP_1_GPIO_Port, LAMP_1_Pin, GPIO_PIN_RESET);
					pLampState[i] = false; 
				} 
			}
	}
	
  if(zero_cross == 1)                     
  {
    for(int i = 0; i < NUM_CHANNELS; i++) 
    {
      if(State[i] == 1)
      {
        if(Lvl_Counter[i] > Dimming_Lvl[i] )       
        { 
					if(i == 7){
						HAL_GPIO_WritePin(LAMP_8_GPIO_Port, LAMP_8_Pin, GPIO_PIN_SET);
						pLampState[i] = true; 
					}else if(i  == 0){
						HAL_GPIO_WritePin(LAMP_1_GPIO_Port, LAMP_1_Pin, GPIO_PIN_SET);
						pLampState[i] = true; 
					} 
          Lvl_Counter[i] = 0;  
          isHandled[i] = 1; 
          
          NumHandled++;
          if(NumHandled == NumActiveChannels)
          {    
            zero_cross = 0;     
          }
        } 
        else if(isHandled[i] == 0)
        {
          Lvl_Counter[i]++;                     
        }          
     }
   }
  }
}
